AWSTemplateFormatVersion: 2010-09-09
Description: Create resource share for domain
Transform: AWS::LanguageExtensions

Parameters:
    DomainId:
        Description: Domain for which blueprint needs to be enabled
        Type: String
    AccountId:
        Type: String
    DomainUnitId:
        Description: Domain unit for which blueprint needs to be enabled
        Type: String

    LakehouseCatalogId:
        Type: String
    AmazonBedrockGuardrailId:
        Type: String
    MLExperimentsId:
        Type: String
    ToolingId:
        Type: String
    RedshiftServerlessId:
        Type: String
    EmrServerlessId:
        Type: String
    WorkflowsId:
        Type: String
    AmazonBedrockPromptId:
        Type: String
    DataLakeId:
        Type: String
    AmazonBedrockEvaluationId:
        Type: String
    AmazonBedrockKnowledgeBaseId:
        Type: String
    PartnerAppsId:
        Type: String
    AmazonBedrockChatAgentId:
        Type: String
    AmazonBedrockFunctionId:
        Type: String
    AmazonBedrockFlowId:
        Type: String
    EmrOnEc2Id:
        Type: String

    SQLAnalyticsProfileId:
        Type: String
    AllCapabilitiesProjectProfileId:
        Type: String


Resources:
    DataZoneGrantPolicyLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: DataZoneGrantPolicyLambdaRole
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: DataZoneGrantPolicyPermissions
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - datazone:AddPolicyGrant
                            Resource: "*"
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource: "*"

    DataZoneGrantPolicyFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: DataZoneGrantPolicyFunction
            Handler: index.handler
            Role: !GetAtt DataZoneGrantPolicyLambdaRole.Arn
            Runtime: python3.9
            Timeout: 60
            Code:
                ZipFile: |
                    import boto3
                    import cfnresponse
                    import traceback
                    
                    def handler(event, context):
                        print("Received event:", event)
                        props = event['ResourceProperties']
                        domain_id = props['DomainId']
                        root_domain_unit_id = props['RootDomainUnitId']
                        account_id = props['AccountId']
                        blueprint_id = props.get('BlueprintId', '').strip()
                        project_profile_id = props.get('ProjectProfileId', '').strip()
                    
                        try:
                            if event['RequestType'] in ['Create', 'Update']:
                                datazone = boto3.client('datazone')
                    
                                if blueprint_id:
                                    print(f"Granting CREATE_ENVIRONMENT_FROM_BLUEPRINT for {blueprint_id}")
                                    datazone.add_policy_grant(
                                        domainIdentifier=domain_id,
                                        entityType="EnvironmentBlueprintConfiguration",
                                        entityIdentifier=f"{account_id}:{blueprint_id}",
                                        policyType="CREATE_ENVIRONMENT_FROM_BLUEPRINT",
                                        principal={
                                            "project": {
                                                "projectGrantFilter": {
                                                    "domainUnitFilter": {
                                                        "domainUnit": root_domain_unit_id,
                                                        "includeChildDomainUnits": True
                                                    }
                                                },
                                                "projectDesignation": "CONTRIBUTOR"
                                            }
                                        },
                                        detail={
                                            "createEnvironmentFromBlueprint": {}
                                        }
                                    )
                    
                                if project_profile_id:
                                    print(f"Granting CREATE_PROJECT_FROM_PROJECT_PROFILE for {project_profile_id}")
                                    datazone.add_policy_grant(
                                        domainIdentifier=domain_id,
                                        entityType="DomainUnit",
                                        entityIdentifier=root_domain_unit_id,
                                        policyType="CREATE_PROJECT_FROM_PROJECT_PROFILE",
                                        principal={
                                            "user": {
                                                "allUsersGrantFilter": {}
                                            }
                                        },
                                        detail={
                                            "createProjectFromProjectProfile": {
                                                "includeChildDomainUnits": True,
                                                "projectProfiles": [project_profile_id]
                                            }
                                        }
                                    )
                    
                            # Always send SUCCESS on Delete or successful create/update
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                    
                        except Exception as e:
                            print("Exception occurred:", str(e))
                            traceback.print_exc()
                            cfnresponse.send(event, context, cfnresponse.FAILED, {}, str(e))
                    

    AddPolicyGrantForLakehouseCatalog:
        Type: Custom::DataZoneGrant
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref LakehouseCatalogId

    AddPolicyGrantForAmazonBedrockGuardrail:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForLakehouseCatalog
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockGuardrailId

    AddPolicyGrantForMLExperiments:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockGuardrail
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref MLExperimentsId

    AddPolicyGrantForTooling:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForMLExperiments
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref ToolingId

    AddPolicyGrantForRedshiftServerless:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForTooling
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref RedshiftServerlessId

    AddPolicyGrantForEmrServerless:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForRedshiftServerless
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref EmrServerlessId

    AddPolicyGrantForWorkflows:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForEmrServerless
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref WorkflowsId

    AddPolicyGrantForAmazonBedrockPrompt:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForWorkflows
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockPromptId

    AddPolicyGrantForDataLake:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockPrompt
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref DataLakeId

    AddPolicyGrantForAmazonBedrockEvaluation:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForDataLake
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockEvaluationId

    AddPolicyGrantForAmazonBedrockKnowledgeBase:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockEvaluation
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockKnowledgeBaseId

    AddPolicyGrantForPartnerApps:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockKnowledgeBase
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref PartnerAppsId

    AddPolicyGrantForAmazonBedrockChatAgent:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForPartnerApps
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockChatAgentId

    AddPolicyGrantForAmazonBedrockFunction:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockChatAgent
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockFunctionId

    AddPolicyGrantForAmazonBedrockFlow:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockFunction
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref AmazonBedrockFlowId

    AddPolicyGrantForEmrOnEc2:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForAmazonBedrockFlow
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            BlueprintId: !Ref EmrOnEc2Id

    AddPolicyGrantForSQLAnalyticsProfile:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForEmrOnEc2
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            ProjectProfileId: !Ref SQLAnalyticsProfileId

    AddPolicyGrantForAllCapabilitiesProjectProfile:
        Type: Custom::DataZoneGrant
        DependsOn: AddPolicyGrantForSQLAnalyticsProfile
        Properties:
            ServiceToken: !GetAtt DataZoneGrantPolicyFunction.Arn
            DomainId: !Ref DomainId
            RootDomainUnitId: !Ref DomainUnitId
            AccountId: !Ref AccountId
            ProjectProfileId: !Ref AllCapabilitiesProjectProfileId