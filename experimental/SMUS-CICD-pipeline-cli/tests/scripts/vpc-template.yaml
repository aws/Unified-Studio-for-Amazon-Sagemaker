AWSTemplateFormatVersion: 2010-09-09

# This template creates a VPC, 3 private subnets in 3 different
# availability zones (to be used with SageMaker Unified Studio), and a public subnet
# to allow connectivity to internet. The template creates a route from each
# private subnets to a NAT gateway with EIP in the public subnet, and
# a route in the public subnet to an IGW.
# This setup enables internet connectivity from SageMaker Unified Studio VPC which allows
# usage of all AWS services.

Parameters:
  useVpcEndpoints:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: >
      You are not required to use VPC endpoints with Amazon SageMaker Unified Studio. The data sent via VPC endpoints that interacts with the AWS
      services does not leave the AWS network and does not reach public internet. If you choose to create VPC endpoints for more secure
      communication, you might incur extra charges. For more information, see AWS PrivateLink pricing at
      https://aws.amazon.com/privatelink/pricing/.

Mappings:
  # found with describe-vpc-endpoint-services --service-names com.amazonaws.<region>.redshift-serverless
  # AZ IDs are fetched with aws ec2 describe-availability-zones --region <region> --query 'AvailabilityZones[*].[ZoneName, ZoneId]' --output text
  AvailabilityZonesId:
    eu-west-1:
      AZ1: euw1-az1
      AZ2: euw1-az2
      AZ3: euw1-az3
      AZ4: ""
    us-east-1:
      AZ1: use1-az1
      AZ2: use1-az2
      AZ3: use1-az4
      AZ4: use1-az6
    us-west-2:
      AZ1: usw2-az1
      AZ2: usw2-az2
      AZ3: usw2-az3
      AZ4: ""
    us-east-2:
      AZ1: use2-az1
      AZ2: use2-az2
      AZ3: use2-az3
      AZ4: ""
    eu-central-1:
      AZ1: euc1-az2
      AZ2: euc1-az3
      AZ3: euc1-az1
      AZ4: ""
    sa-east-1:
      AZ1: sae1-az1
      AZ2: sae1-az2
      AZ3: sae1-az3
      AZ4: ""
    ap-northeast-2:
      AZ1: apne2-az1
      AZ2: apne2-az2
      AZ3: apne2-az3
      AZ4: ""
    eu-west-2:
      AZ1: euw2-az2
      AZ2: euw2-az3
      AZ3: euw2-az1
      AZ4: ""
    ap-northeast-1:
      AZ1: apne1-az4
      AZ2: apne1-az1
      AZ3: apne1-az2
      AZ4: ""
    ap-southeast-1:
      AZ1: apse1-az2
      AZ2: apse1-az1
      AZ3: apse1-az3
      AZ4: ""
    ap-southeast-2:
      AZ1: apse2-az3
      AZ2: apse2-az1
      AZ3: apse2-az2
      AZ4: ""
    ca-central-1:
      AZ1: cac1-az1
      AZ2: cac1-az2
      AZ3: cac1-az4
      AZ4: ""
    ap-south-1:
      AZ1: aps1-az1
      AZ2: aps1-az2
      AZ3: aps1-az3
      AZ4: ""
    eu-west-3:
      AZ1: euw3-az1
      AZ2: euw3-az2
      AZ3: euw3-az3
      AZ4: "" 
    eu-north-1:
      AZ1: eun1-az1
      AZ2: eun1-az2
      AZ3: eun1-az3
      AZ4: ""
    af-south-1:
      AZ1: afs1-az1
      AZ2: afs1-az2
      AZ3: afs1-az3
      AZ4: ""
    ap-east-1:
      AZ1: ape1-az1
      AZ2: ape1-az2
      AZ3: ape1-az3
      AZ4: ""
    eu-south-2:
      AZ1: eus2-az1
      AZ2: eus2-az2
      AZ3: eus2-az3
      AZ4: ""
    eu-central-2:
      AZ1: euc2-az1
      AZ2: euc2-az2
      AZ3: euc2-az3
      AZ4: ""
Conditions:
  useVpcEndpoints: !Equals [!Ref useVpcEndpoints, "true"]

  codeWhispererEnabledRegion: !Equals [!Ref "AWS::Region", 'us-east-1']
  qEnabledRegion: !Equals [!Ref "AWS::Region", 'us-east-1']
  isUSEast1: !Equals [!Ref "AWS::Region", 'us-east-1']
  isSAEast1: !Equals [!Ref "AWS::Region", 'sa-east-1']
  isCACentral1: !Equals [!Ref "AWS::Region", 'ca-central-1']
  
  hasAZ1ForRegion: !Not [!Equals [!FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ1], ""]]
  hasAZ2ForRegion: !Not [!Equals [!FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ2], ""]]
  hasAZ3ForRegion: !Not [!Equals [!FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ3], ""]]
  hasAZ4ForRegion: !Not [!Equals [!FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ4], ""]]
  
  createVPCEWithTwoSubnets: !And [!Condition useVpcEndpoints, !Condition hasAZ1ForRegion, !Condition hasAZ2ForRegion, !Not [!Condition hasAZ3ForRegion]]
  createVPCEWithThreeSubnets: !And [!Condition useVpcEndpoints, !Condition hasAZ1ForRegion, !Condition hasAZ2ForRegion, !Condition hasAZ3ForRegion]

  createVPCEWithTwoSubnetsRedshiftServerless: !And [!Condition useVpcEndpoints, !Condition hasAZ1ForRegion, !Condition hasAZ2ForRegion, !Not [!Condition hasAZ3ForRegion]]
  createVPCEWithThreeSubnetsRedshiftServerlessNotUSEast1: !And [!Condition useVpcEndpoints, !Condition hasAZ1ForRegion, !Condition hasAZ2ForRegion, !Condition hasAZ3ForRegion, !Not [!Condition isUSEast1]]
  createVPCEWithThreeSubnetsRedshiftServerlessUSEast1: !And [!Condition useVpcEndpoints, !Condition hasAZ1ForRegion, !Condition hasAZ2ForRegion, !Condition hasAZ4ForRegion, !Condition isUSEast1]

  createVPCEWithTwoSubnetsCodeWhisperer: !And [!Condition useVpcEndpoints, !Condition codeWhispererEnabledRegion, !Condition createVPCEWithTwoSubnets]
  createVPCEWithThreeSubnetsCodeWhisperer: !And [!Condition useVpcEndpoints, !Condition codeWhispererEnabledRegion, !Condition createVPCEWithThreeSubnets]

  createVPCEWithTwoSubnetsQ: !And [!Condition useVpcEndpoints, !Condition qEnabledRegion, !Condition createVPCEWithTwoSubnets]
  createVPCEWithThreeSubnetsQ: !And [!Condition useVpcEndpoints, !Condition qEnabledRegion, !Condition createVPCEWithThreeSubnets]

  createVPCEWithTwoSubnetsCodeCommit: !And [!Condition useVpcEndpoints, !Condition isSAEast1]
  createVPCEWithThreeSubnetsCodeCommit: !And [!Condition useVpcEndpoints, !Not [!Condition isSAEast1]]

  createVPCEWithTwoSubnetsGitCodeCommit: !And [!Condition useVpcEndpoints, !Condition isSAEast1]
  createVPCEWithThreeSubnetsGitCodeCommit: !And [!Condition useVpcEndpoints, !Not [!Condition isSAEast1]]

  createVPCEWithTwoSubnetsEMR: !And [!Condition useVpcEndpoints, !Condition isCACentral1]
  createVPCEWithThreeSubnetsEMR: !And [!Condition useVpcEndpoints, !Not [!Condition isCACentral1]]

  createVPCEWithTwoSubnetsRedshift: !And [!Condition useVpcEndpoints, !Condition isCACentral1]
  createVPCEWithThreeSubnetsRedshift: !And [!Condition useVpcEndpoints, !Not [!Condition isCACentral1]]

Resources:
  SageMakerUnifiedStudioVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.38.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioVPC'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  
  SageMakerUnifiedStudioSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the VPC-endpoints.
      GroupName: 'sagemaker-unified-studio-vpc-endpoint'
      SecurityGroupEgress:
        - Description: Allows outbound HTTPS access to any IPv4 address
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - Description: Allows inbound HTTPS access for traffic from VPC
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.38.0.0/16
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
      VpcId: !Ref SageMakerUnifiedStudioVpc


  SageMakerUnifiedStudioPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.38.224.0/21"
      VpcId: !Ref SageMakerUnifiedStudioVpc
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioPublicSubnet'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true

  PublicRouteTableIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SageMakerUnifiedStudioVpcInternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SageMakerUnifiedStudioVpc

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SageMakerUnifiedStudioPublicSubnet

  SageMakerUnifiedStudioPrivateSubnet1:
    Condition: hasAZ1ForRegion
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ1]
      CidrBlock: "10.38.192.0/21"
      VpcId: !Ref SageMakerUnifiedStudioVpc
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioPrivateSubnet1'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true

  SageMakerUnifiedStudioPrivateSubnet2:
    Condition: hasAZ2ForRegion
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ2]
      CidrBlock: "10.38.200.0/21"
      VpcId: !Ref SageMakerUnifiedStudioVpc
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioPrivateSubnet2'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true

  SageMakerUnifiedStudioPrivateSubnet3:
    Condition: hasAZ3ForRegion
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ3]
      CidrBlock: "10.38.208.0/21"
      VpcId: !Ref SageMakerUnifiedStudioVpc
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioPrivateSubnet3'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true
  
  SageMakerUnifiedStudioPrivateSubnet4:
    Condition: hasAZ4ForRegion
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [AvailabilityZonesId, !Ref "AWS::Region", AZ4]
      CidrBlock: "10.38.216.0/21"
      VpcId: !Ref SageMakerUnifiedStudioVpc
      Tags:
        - Key: CreatedForUseWithSageMakerUnifiedStudio
          Value: true
        - Key: Name
          Value: 'SageMakerUnifiedStudioPrivateSubnet4'
        - Key: for-use-with-amazon-emr-managed-policies
          Value: true

  SageMakerUnifiedStudioEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SageMakerUnifiedStudioVpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  SageMakerUnifiedStudioVpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SageMakerUnifiedStudioVpcInternetGateway
      VpcId: !Ref SageMakerUnifiedStudioVpc

  SageMakerUnifiedStudioPublicSubnetNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SageMakerUnifiedStudioEIP.AllocationId
      SubnetId: !Ref SageMakerUnifiedStudioPublicSubnet

  SageMakerUnifiedStudioRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SageMakerUnifiedStudioVpc

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SageMakerUnifiedStudioRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SageMakerUnifiedStudioPublicSubnetNATGateway

  PrivateSubnetRouteTableAssociation1:
    Condition: hasAZ1ForRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SageMakerUnifiedStudioRouteTable
      SubnetId: !Ref SageMakerUnifiedStudioPrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Condition: hasAZ2ForRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SageMakerUnifiedStudioRouteTable
      SubnetId: !Ref SageMakerUnifiedStudioPrivateSubnet2

  PrivateSubnetRouteTableAssociation3:
    Condition: hasAZ3ForRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SageMakerUnifiedStudioRouteTable
      SubnetId: !Ref SageMakerUnifiedStudioPrivateSubnet3
  
  PrivateSubnetRouteTableAssociation4:
    Condition: hasAZ4ForRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SageMakerUnifiedStudioRouteTable
      SubnetId: !Ref SageMakerUnifiedStudioPrivateSubnet4

  ############################################################
  # S3 VPC-E
  ############################################################
  SageMakerUnifiedStudioS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref SageMakerUnifiedStudioVpc
      RouteTableIds:
        - !Ref SageMakerUnifiedStudioRouteTable

Outputs:
  VpcId:
    Description: 'VPC ID for SageMaker Unified Studio'
    Value: !Ref SageMakerUnifiedStudioVpc
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  PrivateSubnets:
    Description: 'Private subnet IDs'
    Value: !Join
      - ','
      - - !If [hasAZ1ForRegion, !Ref SageMakerUnifiedStudioPrivateSubnet1, !Ref 'AWS::NoValue']
        - !If [hasAZ2ForRegion, !Ref SageMakerUnifiedStudioPrivateSubnet2, !Ref 'AWS::NoValue']
        - !If [hasAZ3ForRegion, !Ref SageMakerUnifiedStudioPrivateSubnet3, !Ref 'AWS::NoValue']
        - !If [hasAZ4ForRegion, !Ref SageMakerUnifiedStudioPrivateSubnet4, !Ref 'AWS::NoValue']
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  AvailabilityZones:
    Description: 'Availability zones for private subnets'
    Value: !Join
      - ','
      - - !If [hasAZ1ForRegion, !GetAtt SageMakerUnifiedStudioPrivateSubnet1.AvailabilityZone, !Ref 'AWS::NoValue']
        - !If [hasAZ2ForRegion, !GetAtt SageMakerUnifiedStudioPrivateSubnet2.AvailabilityZone, !Ref 'AWS::NoValue']
        - !If [hasAZ3ForRegion, !GetAtt SageMakerUnifiedStudioPrivateSubnet3.AvailabilityZone, !Ref 'AWS::NoValue']
        - !If [hasAZ4ForRegion, !GetAtt SageMakerUnifiedStudioPrivateSubnet4.AvailabilityZone, !Ref 'AWS::NoValue']
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZones'
