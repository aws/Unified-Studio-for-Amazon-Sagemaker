name: Full Pipeline Lifecycle Demo

on:
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'SageMaker Unified Studio domain name'
        required: true
        default: 'cicd-test-domain'
      project_name:
        description: 'Development project name'
        required: true
        default: 'dev-marketing'
      pipeline_name:
        description: 'Pipeline name for the demo'
        required: true
        default: 'DemoMarketingPipeline'

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    name: "Setup - Resolve Domain and Project IDs"
    runs-on: ubuntu-latest
    environment: aws-env
    outputs:
      domain-id: ${{ steps.resolve.outputs.domain-id }}
      project-id: ${{ steps.resolve.outputs.project-id }}
      pipeline-file: ${{ steps.resolve.outputs.pipeline-file }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-setup
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install SMUS CLI
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Resolve Domain and Project IDs
      id: resolve
      run: |
        # Resolve domain ID
        DOMAIN_ID=$(aws datazone list-domains --query "items[?name=='${{ github.event.inputs.domain_name }}'].id" --output text)
        if [ -z "$DOMAIN_ID" ] || [ "$DOMAIN_ID" = "None" ]; then
          echo "❌ Domain '${{ github.event.inputs.domain_name }}' not found"
          exit 1
        fi
        
        # Resolve project ID
        PROJECT_ID=$(aws datazone list-projects --domain-identifier "$DOMAIN_ID" --query "items[?name=='${{ github.event.inputs.project_name }}'].id" --output text)
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "None" ]; then
          echo "❌ Project '${{ github.event.inputs.project_name }}' not found in domain"
          exit 1
        fi
        
        PIPELINE_FILE="${{ github.event.inputs.pipeline_name }}.yaml"
        
        echo "✅ Domain ID: $DOMAIN_ID"
        echo "✅ Project ID: $PROJECT_ID"
        echo "✅ Pipeline File: $PIPELINE_FILE"
        
        echo "domain-id=$DOMAIN_ID" >> $GITHUB_OUTPUT
        echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
        echo "pipeline-file=$PIPELINE_FILE" >> $GITHUB_OUTPUT

  create-manifest:
    name: "Step 1 - Create Pipeline Manifest"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: setup
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-create
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Create pipeline manifest
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli create \
          --name "${{ github.event.inputs.pipeline_name }}" \
          --domain-id "${{ needs.setup.outputs.domain-id }}" \
          --dev-project-id "${{ needs.setup.outputs.project-id }}" \
          --output "${{ needs.setup.outputs.pipeline-file }}"
        
        echo "✅ Pipeline manifest created: ${{ needs.setup.outputs.pipeline-file }}"
        cat "${{ needs.setup.outputs.pipeline-file }}"
    
    - name: Upload pipeline manifest
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/${{ needs.setup.outputs.pipeline-file }}

  validate-configuration:
    name: "Step 2 - Validate Pipeline Configuration"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, create-manifest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-validate
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Validate pipeline configuration
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli describe \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --workflows --connections --connect --output TEXT
        
        echo "✅ Pipeline configuration validated"

  create-bundle:
    name: "Step 3 - Create Deployment Bundle"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, validate-configuration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-bundle
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Create deployment bundle
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli bundle \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --output JSON
        
        echo "✅ Deployment bundle created for dev target"

  deploy-test:
    name: "Step 4 - Deploy to Test Environment"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, create-bundle]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-deploy
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Deploy to test environment
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli deploy \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets test
        
        echo "✅ Deployed to test environment"

  run-tests:
    name: "Step 5 - Run Tests"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, deploy-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-test
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Run tests
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli test \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets test
        
        echo "✅ Tests completed"

  monitor-pipeline:
    name: "Step 6 - Monitor Pipeline Status"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, run-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-monitor
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Monitor pipeline status
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli monitor \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --output TEXT
        
        echo "✅ Pipeline monitoring completed"

  execute-workflows:
    name: "Step 7 - Execute Workflow Commands"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, monitor-pipeline]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-execute
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
    
    - name: Trigger DAG
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "dags trigger test_dag"
        
        echo "✅ DAG triggered"
    
    - name: List DAG tasks
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "tasks list test_dag"
        
        echo "✅ DAG tasks listed"
    
    - name: Check task state
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        EXECUTION_DATE=$(date -u +'manual__%Y-%m-%dT%H:%M:%S+00:00')
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "tasks state test_dag hello_world $EXECUTION_DATE"
        
        echo "✅ Task state checked"

  cleanup:
    name: "Step 8 - Cleanup Resources"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, execute-workflows]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-cleanup
    
    - name: Set up Python and install SMUS CLI
      run: |
        python -m pip install --upgrade pip
        cd experimental/SMUS-CICD-pipeline-cli
        pip install -e ".[dev]"
    
    - name: Download pipeline manifest
      uses: actions/download-artifact@v4
      with:
        name: pipeline-manifest
        path: experimental/SMUS-CICD-pipeline-cli/
      continue-on-error: true
    
    - name: Cleanup test resources
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        smus-cli delete \
          --targets test \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --force
        
        echo "✅ Cleanup completed"
      continue-on-error: true
