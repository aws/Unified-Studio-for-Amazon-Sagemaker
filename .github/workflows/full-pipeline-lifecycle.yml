name: Full SMUS CICD Pipeline Lifecycle Demo

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'experimental/SMUS-CICD-pipeline-cli/**'
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'SageMaker Unified Studio domain name'
        required: true
        default: 'cicd-test-domain'
      project_name:
        description: 'Development project name'
        required: true
        default: 'dev-marketing'
      pipeline_name:
        description: 'Pipeline name for the demo'
        required: true
        default: 'DemoMarketingPipeline'

permissions:
  id-token: write
  contents: read

jobs:
  cleanup:
    name: "Step 1 - Cleanup Previous Resources"
    runs-on: ubuntu-latest
    environment: aws-env
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-cleanup
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip --no-cache-dir
        pip install -e ".[dev]" --no-cache-dir
    
    - name: Cleanup previous test resources
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        echo "🧹 Cleaning up previous test resources..."
        
        # Try to delete test target resources if they exist
        smus-cli delete \
          --pipeline "DemoMarketingPipeline.yaml" \
          --targets test \
          --force || echo "No test resources to clean up"
        
        echo "✅ Cleanup completed"
      continue-on-error: true

  setup:
    name: "Step 2 - Setup Domain and Project IDs"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: cleanup
    outputs:
      domain-id: ${{ steps.resolve.outputs.domain-id }}
      project-id: ${{ steps.resolve.outputs.project-id }}
      pipeline-file: ${{ steps.resolve.outputs.pipeline-file }}
      domain-name: ${{ steps.resolve.outputs.domain-name }}
      project-name: ${{ steps.resolve.outputs.project-name }}
      pipeline-name: ${{ steps.resolve.outputs.pipeline-name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-setup
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Resolve Domain and Project IDs
      id: resolve
      run: |
        # Set default values when inputs are not available (e.g., on pull_request)
        DOMAIN_NAME="${{ github.event.inputs.domain_name || 'cicd-test-domain' }}"
        PROJECT_NAME="${{ github.event.inputs.project_name || 'dev-marketing' }}"
        PIPELINE_NAME="${{ github.event.inputs.pipeline_name || 'DemoMarketingPipeline' }}"
        
        echo "🔍 Using domain: $DOMAIN_NAME"
        echo "🔍 Using project: $PROJECT_NAME"
        echo "🔍 Using pipeline: $PIPELINE_NAME"
        
        # Resolve domain ID
        DOMAIN_ID=$(aws datazone list-domains --query "items[?name=='$DOMAIN_NAME'].id" --output text)
        if [ -z "$DOMAIN_ID" ] || [ "$DOMAIN_ID" = "None" ]; then
          echo "❌ Domain '$DOMAIN_NAME' not found"
          exit 1
        fi
        
        # Resolve project ID
        PROJECT_ID=$(aws datazone list-projects --domain-identifier "$DOMAIN_ID" --query "items[?name=='$PROJECT_NAME'].id" --output text)
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "None" ]; then
          echo "❌ Project '$PROJECT_NAME' not found in domain"
          exit 1
        fi
        
        PIPELINE_FILE="${PIPELINE_NAME}.yaml"
        
        echo "✅ Domain ID: $DOMAIN_ID"
        echo "✅ Project ID: $PROJECT_ID"
        echo "✅ Using existing pipeline file: DemoMarketingPipeline.yaml"
        
        # Set outputs
        echo "domain-id=$DOMAIN_ID" >> $GITHUB_OUTPUT
        echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
        echo "pipeline-file=DemoMarketingPipeline.yaml" >> $GITHUB_OUTPUT
        echo "domain-name=$DOMAIN_NAME" >> $GITHUB_OUTPUT
        echo "project-name=$PROJECT_NAME" >> $GITHUB_OUTPUT
        echo "pipeline-name=$PIPELINE_NAME" >> $GITHUB_OUTPUT

  validate-configuration:
    name: "Step 3 - Validate Pipeline Configuration"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-validate
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Validate pipeline configuration
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli describe \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --workflows --connections --connect --output TEXT
        
        echo "✅ Pipeline configuration validated"

  create-bundle:
    name: "Step 3 - Create Deployment Bundle"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, validate-configuration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-bundle
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Create deployment bundle
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli bundle \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --output JSON
        
        echo "✅ Deployment bundle created for dev target"
    
    - name: Upload deployment bundle
      uses: actions/upload-artifact@v4
      with:
        name: deployment-bundle
        path: experimental/SMUS-CICD-pipeline-cli/examples/bundles/${{ needs.setup.outputs.pipeline-name }}.zip

  deploy-test:
    name: "Step 4 - Deploy to Test Environment"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, create-bundle]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-deploy
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Download deployment bundle
      uses: actions/download-artifact@v4
      with:
        name: deployment-bundle
        path: experimental/SMUS-CICD-pipeline-cli/examples/bundles/
    
    - name: Deploy to test environment
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli deploy \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets test
        
        echo "✅ Deployed to test environment"

  run-tests:
    name: "Step 5 - Run Tests"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, deploy-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-test
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Run tests
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli test \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets test
        
        echo "✅ Tests completed"

  monitor-pipeline:
    name: "Step 6 - Monitor Pipeline Status"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, run-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-monitor
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Monitor pipeline status
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli monitor \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --output TEXT
        
        echo "✅ Pipeline monitoring completed"

  execute-workflows:
    name: "Step 7 - Execute Workflow Commands"
    runs-on: ubuntu-latest
    environment: aws-env
    needs: [setup, monitor-pipeline]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: smus-pipeline-lifecycle-execute
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd experimental/SMUS-CICD-pipeline-cli
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    
    - name: Trigger DAG
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "dags trigger test_dag"
        
        echo "✅ DAG triggered"
    
    - name: List DAG tasks
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "tasks list test_dag"
        
        echo "✅ DAG tasks listed"
    
    - name: Check task state
      run: |
        cd experimental/SMUS-CICD-pipeline-cli/examples
        EXECUTION_DATE=$(date -u +'manual__%Y-%m-%dT%H:%M:%S+00:00')
        smus-cli run \
          --pipeline "${{ needs.setup.outputs.pipeline-file }}" \
          --targets dev --workflow test_dag \
          --command "tasks state test_dag hello_world $EXECUTION_DATE"
        
        echo "✅ Task state checked"
        echo "🎉 Pipeline lifecycle demo completed successfully!"
        echo "📋 Resources left in place for inspection:"
        echo "  - Project: dev-marketing-test"
        echo "  - Domain: cicd-test-domain"
        echo "  - MWAA Environment: (if created)"
